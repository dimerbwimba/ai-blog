generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PostStatus {
  DRAFTED
  PUBLISHED
  APPROVED
  REJECTED
}

enum UserRole {
  READER
  WRITER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  role              UserRole            @default(READER)
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  verificationToken VerificationToken[]
  reviewedPosts     Post[]              @relation("ReviewedPosts")
  faqs              FAQ[]
  itineraries       Itinerary[]
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expires   DateTime
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Post {
  id                String               @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  content           String
  slug              String               @unique
  seo_slug          String               @unique
  generated_with_ai Boolean              @default(false)
  description       String
  image             String
  reviewedAt        DateTime?
  reviewedBy        User?                @relation("ReviewedPosts", fields: [reviewedById], references: [id])
  reviewedById      String?              @db.ObjectId
  reviewFeedback    String?
  tags              String[]
  keywords          String[]
  status            PostStatus           @default(DRAFTED)
  featured          Boolean              @default(false)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  author            User                 @relation(fields: [authorId], references: [id])
  authorId          String               @db.ObjectId
  categories        CategoriesOnPosts[]
  destinations      DestinationOnPosts[]
  comments          Comment[]
  faqs              FAQ[]
  views             View[]
  viewCount         Int                  @default(0)
}

model Destination {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  image          String?
  slug           String?              @unique
  country        String
  continent      String?
  region         String?
  country_slug   String?
  continent_slug String?
  region_slug    String?
  accommodations Accommodation[]
  itineraries    Itinerary[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  posts          DestinationOnPosts[]

  @@map("destinations")
}

model Category {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String              @unique
  description String
  image       String?
  slug        String?             @unique
  posts       CategoriesOnPosts[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
}

model DestinationOnPosts {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  post          Post        @relation(fields: [postId], references: [id])
  postId        String      @db.ObjectId
  destination   Destination @relation(fields: [destinationId], references: [id])
  destinationId String      @db.ObjectId
}

model CategoriesOnPosts {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id])
  postId     String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  @@unique([postId, categoryId])
}

model FAQ {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
}

model Accommodation {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  jsonData    Json        // This will store all accommodation data
  destinationId String      @db.ObjectId
  destination Destination @relation(fields: [destinationId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([destinationId])
  @@map("accommodations")
}

model Newsletter {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  email          String           @unique
  name           String?
  status         NewsletterStatus @default(ACTIVE)
  source         String? // Where the subscription came from (e.g., "floating-notification", "footer", etc.)
  ipAddress      String? // For compliance and tracking
  verified       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  // Tracking fields
  lastEmailSent  DateTime?
  unsubscribedAt DateTime?
  // Optional preferences
  preferences    Json? // Store user preferences as JSON (e.g., frequency, categories of interest)

  @@map("newsletters")
}

enum NewsletterStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
  PENDING
}

model View {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  ip        String   // For unique view counting
  userAgent String?  // For analytics
  referer   String?  // Track traffic sources
  country   String?  // Geolocation data
  city      String?  // Geolocation data
  createdAt DateTime @default(now())

  // Compound index for unique views per post per IP within a time window
  @@unique([postId, ip], name: "unique_view_per_ip")
  // Index for analytics queries
  @@index([postId, createdAt])
  @@index([country])
  @@map("views")
}

// Itinerary model with JSON data
model Itinerary {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  
  startDate   DateTime
  endDate     DateTime
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // JSON data containing all itinerary details (days, activities, etc.)
  body        Json
  
  // Destination relationship
  destinationId String  @db.ObjectId
  destination   Destination @relation(fields: [destinationId], references: [id])
  
  // Metadata
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([destinationId])
  @@map("itineraries")
}

// Individual day in an itinerary



